Check the following items:
Server launches and is listening on all network interfaces, on the given port from the command line, and on the port + 1 for TLS communication.
Using the ‘nc’ tool, you can connect  to the server, send commands, and the server is answering.
Using a regular irc client, you can connect on the regular port, and on the TLS port as well.  
The server can handle multiple connections at the same time. At any moment, the server should not block and be able to answer to all demands.
Try with multiple irc clients, nc tool, on regular and TLS ports, at the same time.
Send the needed commands to join a channel. Control that all messages from one client on that channel are sent to all other client of the channel


Network communications can be disturbed by many strange situations.
Just like in the subject, using ne, try to send partial commands. Check that the server answers correctly.
With a partial command sent, control that other connections are running fine.
Unexpectedly kill a client, and check that the server is still operational on other connections and for new incoming clients.
Unexpectedly kill a nc with just half of a command sent, check again that the server is not in an odd state or blocked.
stop a client (^-z) connected on a channel, and then flood the channel using another client. The server should not hang.
When the client is live again, all stored commands should be processed normally. Also control that there is no memory leak on the server during this operation.

With both nc and a regular irc client, check that you can authenticate, set a nickname, a username, join a channel. This should be ok, you should have already	 used this above.
Control that private messages and notices are fully functional, with several parameters (PRIVMSG and NOTICE).
Check that a regular user does not have privileges to do operator actions, then test with an operator.
All the channel operation commands should be tested.


Now it’s time to control that serveral of your servers can connect to each others and successfully exchange and relay messages.
Launch a first server, then connect a second, then a third one.
With a privileged client, check that all 3 servers answer correctly to 8 server commands : statistics, time, info,…
Connect many client on the 3 servers, on several channels, and control that every announces and messages on a channel propagate correctly through all servers. 

Repeat the same actions with at least one public implementation of irc server (like irc, available with brew).
When a server is killed , check that other servers are properly warned.
